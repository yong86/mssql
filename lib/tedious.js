// Generated by CoffeeScript 1.7.1
(function() {
  var DECLARATIONS, Pool, TYPES, Table, UDT, createColumns, getMssqlType, getTediousType, parameterCorrection, tds, util, valueCorrection,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Pool = require('generic-pool').Pool;

  tds = require('tedious');

  util = require('util');

  TYPES = require('./datatypes').TYPES;

  DECLARATIONS = require('./datatypes').DECLARATIONS;

  UDT = require('./udt').PARSERS;

  Table = require('./table');


  /*
  @ignore
   */

  getTediousType = function(type) {
    switch (type) {
      case TYPES.VarChar:
        return tds.TYPES.VarChar;
      case TYPES.NVarChar:
        return tds.TYPES.NVarChar;
      case TYPES.Text:
        return tds.TYPES.Text;
      case TYPES.Int:
        return tds.TYPES.Int;
      case TYPES.BigInt:
        return tds.TYPES.BigInt;
      case TYPES.TinyInt:
        return tds.TYPES.TinyInt;
      case TYPES.SmallInt:
        return tds.TYPES.SmallInt;
      case TYPES.Bit:
        return tds.TYPES.Bit;
      case TYPES.Float:
        return tds.TYPES.Float;
      case TYPES.Decimal:
        return tds.TYPES.Decimal;
      case TYPES.Numeric:
        return tds.TYPES.Numeric;
      case TYPES.Real:
        return tds.TYPES.Real;
      case TYPES.Money:
        return tds.TYPES.Money;
      case TYPES.SmallMoney:
        return tds.TYPES.SmallMoney;
      case TYPES.Time:
        return tds.TYPES.TimeN;
      case TYPES.Date:
        return tds.TYPES.DateN;
      case TYPES.DateTime:
        return tds.TYPES.DateTime;
      case TYPES.DateTime2:
        return tds.TYPES.DateTime2N;
      case TYPES.DateTimeOffset:
        return tds.TYPES.DateTimeOffsetN;
      case TYPES.SmallDateTime:
        return tds.TYPES.SmallDateTime;
      case TYPES.UniqueIdentifier:
        return tds.TYPES.UniqueIdentifierN;
      case TYPES.Xml:
        return tds.TYPES.VarChar;
      case TYPES.Char:
        return tds.TYPES.VarChar;
      case TYPES.NChar:
        return tds.TYPES.NVarChar;
      case TYPES.NText:
        return tds.TYPES.NVarChar;
      case TYPES.Image:
        return tds.TYPES.Image;
      case TYPES.Binary:
        return tds.TYPES.Binary;
      case TYPES.VarBinary:
        return tds.TYPES.VarBinary;
      case TYPES.UDT:
      case TYPES.Geography:
      case TYPES.Geometry:
        return tds.TYPES.UDT;
      case TYPES.TVP:
        return tds.TYPES.TVP;
      default:
        return type;
    }
  };


  /*
  @ignore
   */

  getMssqlType = function(type) {
    switch (type) {
      case tds.TYPES.Char:
        return TYPES.Char;
      case tds.TYPES.NChar:
        return TYPES.NChar;
      case tds.TYPES.VarChar:
        return TYPES.VarChar;
      case tds.TYPES.NVarChar:
        return TYPES.NVarChar;
      case tds.TYPES.Text:
        return TYPES.Text;
      case tds.TYPES.NText:
        return TYPES.NText;
      case tds.TYPES.Int:
      case tds.TYPES.IntN:
        return TYPES.Int;
      case tds.TYPES.BigInt:
        return TYPES.BigInt;
      case tds.TYPES.TinyInt:
        return TYPES.TinyInt;
      case tds.TYPES.SmallInt:
        return TYPES.SmallInt;
      case tds.TYPES.Bit:
      case tds.TYPES.BitN:
        return TYPES.Bit;
      case tds.TYPES.Float:
      case tds.TYPES.FloatN:
        return TYPES.Float;
      case tds.TYPES.Real:
        return TYPES.Real;
      case tds.TYPES.Money:
      case tds.TYPES.MoneyN:
        return TYPES.Money;
      case tds.TYPES.SmallMoney:
        return TYPES.SmallMoney;
      case tds.TYPES.Numeric:
      case tds.TYPES.NumericN:
        return TYPES.Numeric;
      case tds.TYPES.Decimal:
      case tds.TYPES.DecimalN:
        return TYPES.Decimal;
      case tds.TYPES.DateTime:
      case tds.TYPES.DateTimeN:
        return TYPES.DateTime;
      case tds.TYPES.TimeN:
        return TYPES.Time;
      case tds.TYPES.DateN:
        return TYPES.Date;
      case tds.TYPES.DateTime2N:
        return TYPES.DateTime2;
      case tds.TYPES.DateTimeOffsetN:
        return TYPES.DateTimeOffset;
      case tds.TYPES.SmallDateTime:
        return TYPES.SmallDateTime;
      case tds.TYPES.UniqueIdentifierN:
        return TYPES.UniqueIdentifier;
      case tds.TYPES.Image:
        return TYPES.Image;
      case tds.TYPES.Binary:
        return TYPES.Binary;
      case tds.TYPES.VarBinary:
        return TYPES.VarBinary;
      case tds.TYPES.Xml:
        return TYPES.Xml;
      case tds.TYPES.UDT:
        return TYPES.UDT;
      case tds.TYPES.TVP:
        return TYPES.TVP;
    }
  };


  /*
  @ignore
   */

  createColumns = function(meta) {
    var key, out, value;
    out = {};
    for (key in meta) {
      value = meta[key];
      out[key] = {
        name: value.colName,
        length: value.dataLength,
        type: getMssqlType(value.type),
        scale: value.scale,
        precision: value.precision
      };
      if (value.udtInfo != null) {
        out[key].udt = {
          name: value.udtInfo.typeName,
          database: value.udtInfo.dbname,
          schema: value.udtInfo.owningSchema,
          assembly: value.udtInfo.assemblyName
        };
        if (DECLARATIONS[value.udtInfo.typeName]) {
          out[key].type = DECLARATIONS[value.udtInfo.typeName];
        }
      }
    }
    return out;
  };


  /*
  @ignore
   */

  valueCorrection = function(value, metadata) {
    if (metadata.type === tds.TYPES.UDT && (value != null)) {
      if (UDT[metadata.udtInfo.typeName]) {
        return UDT[metadata.udtInfo.typeName](value);
      } else {
        return value;
      }
    } else {
      return value;
    }
  };


  /*
  @ignore
   */

  parameterCorrection = function(value) {
    var col, tvp, _i, _len, _ref;
    if (value instanceof Table) {
      tvp = {
        columns: [],
        rows: value.rows
      };
      _ref = value.columns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        col = _ref[_i];
        tvp.columns.push({
          name: col.name,
          type: getTediousType(col.type),
          length: col.length,
          scale: col.scale,
          precision: col.precision
        });
      }
      return tvp;
    } else {
      return value;
    }
  };


  /*
  @ignore
   */

  module.exports = function(Connection, Transaction, Request, ConnectionError, TransactionError, RequestError) {
    var TediousConnection, TediousRequest, TediousTransaction;
    TediousConnection = (function(_super) {
      __extends(TediousConnection, _super);

      function TediousConnection() {
        return TediousConnection.__super__.constructor.apply(this, arguments);
      }

      TediousConnection.prototype.pool = null;

      TediousConnection.prototype.connect = function(config, callback) {
        var cfg, cfg_pool, key, value, _base, _base1, _base2, _base3, _ref, _ref1;
        cfg = {
          userName: config.user,
          password: config.password,
          server: config.server,
          options: config.options
        };
        if ((_base = cfg.options).database == null) {
          _base.database = config.database;
        }
        if ((_base1 = cfg.options).port == null) {
          _base1.port = config.port;
        }
        if ((_base2 = cfg.options).connectTimeout == null) {
          _base2.connectTimeout = (_ref = config.timeout) != null ? _ref : 15000;
        }
        if ((_base3 = cfg.options).tdsVersion == null) {
          _base3.tdsVersion = '7_4';
        }
        cfg.options.rowCollectionOnDone = false;
        cfg.options.rowCollectionOnRequestCompletion = false;
        cfg.options.useColumnNames = false;
        if (cfg.options.instanceName) {
          delete cfg.options.port;
        }
        cfg_pool = {
          name: 'mssql',
          max: 10,
          min: 0,
          idleTimeoutMillis: 30000,
          create: (function(_this) {
            return function(callback) {
              var c;
              c = new tds.Connection(cfg);
              return c.once('connect', function(err) {
                if (err) {
                  err = ConnectionError(err);
                }
                if (err) {
                  return callback(err, null);
                }
                return callback(null, c);
              });
            };
          })(this),
          validate: function(c) {
            return (c != null) && !c.closed;
          },
          destroy: function(c) {
            return c != null ? c.close() : void 0;
          }
        };
        if (config.pool) {
          _ref1 = config.pool;
          for (key in _ref1) {
            value = _ref1[key];
            cfg_pool[key] = value;
          }
        }
        this.pool = Pool(cfg_pool, cfg);
        return this.pool.acquire((function(_this) {
          return function(err, connection) {
            _this.pool.release(connection);
            return callback(err);
          };
        })(this));
      };

      TediousConnection.prototype.close = function(callback) {
        if (!this.pool) {
          return callback(null);
        }
        return this.pool.drain((function(_this) {
          return function() {
            _this.pool.destroyAllNow();
            _this.pool = null;
            return callback(null);
          };
        })(this));
      };

      return TediousConnection;

    })(Connection);
    TediousTransaction = (function(_super) {
      __extends(TediousTransaction, _super);

      function TediousTransaction() {
        return TediousTransaction.__super__.constructor.apply(this, arguments);
      }

      TediousTransaction.prototype.begin = function(callback) {
        return this.connection.pool.acquire((function(_this) {
          return function(err, connection) {
            if (err) {
              return callback(err);
            }
            _this._pooledConnection = connection;
            return connection.beginTransaction(function(err) {
              if (err) {
                err = TransactionError(err);
              }
              return callback(err);
            }, _this.name, _this.isolationLevel);
          };
        })(this));
      };

      TediousTransaction.prototype.commit = function(callback) {
        return this._pooledConnection.commitTransaction((function(_this) {
          return function(err) {
            if (err) {
              err = TransactionError(err);
            }
            _this.connection.pool.release(_this._pooledConnection);
            _this._pooledConnection = null;
            return callback(err);
          };
        })(this));
      };

      TediousTransaction.prototype.rollback = function(callback) {
        return this._pooledConnection.rollbackTransaction((function(_this) {
          return function(err) {
            if (err) {
              err = TransactionError(err);
            }
            _this.connection.pool.release(_this._pooledConnection);
            _this._pooledConnection = null;
            return callback(err);
          };
        })(this));
      };

      return TediousTransaction;

    })(Transaction);
    TediousRequest = (function(_super) {
      __extends(TediousRequest, _super);

      function TediousRequest() {
        return TediousRequest.__super__.constructor.apply(this, arguments);
      }


      /*
      		Execute specified sql command.
       */

      TediousRequest.prototype.query = function(command, callback) {
        var columns, recordset, recordsets, started;
        columns = {};
        recordset = [];
        recordsets = [];
        started = Date.now();
        return this._acquire((function(_this) {
          return function(err, connection) {
            var name, param, req, _ref, _ref1;
            if (!err) {
              if (_this.verbose) {
                console.log("---------- sql query ----------\n    query: " + command);
              }
              if (_this.canceled) {
                if (_this.verbose) {
                  console.log("---------- canceling ----------");
                }
                _this._release(connection);
                return typeof callback === "function" ? callback(new RequestError("Canceled.", 'ECANCEL')) : void 0;
              }
              _this._cancel = function() {
                if (_this.verbose) {
                  console.log("---------- canceling ----------");
                }
                return connection.cancel();
              };
              req = new tds.Request(command, function(err) {
                var elapsed;
                if (err) {
                  err = RequestError(err);
                }
                if (_this.verbose) {
                  if (err) {
                    console.log("    error: " + err);
                  }
                  elapsed = Date.now() - started;
                  console.log(" duration: " + elapsed + "ms");
                  console.log("---------- completed ----------");
                }
                if (recordset) {
                  Object.defineProperty(recordset, 'columns', {
                    enumerable: false,
                    value: columns
                  });
                }
                _this._cancel = null;
                _this._release(connection);
                return typeof callback === "function" ? callback(err, _this.multiple ? recordsets : recordsets[0]) : void 0;
              });
              req.on('columnMetadata', function(metadata) {
                var col, _i, _len, _results;
                _results = [];
                for (_i = 0, _len = metadata.length; _i < _len; _i++) {
                  col = metadata[_i];
                  _results.push(columns[col.colName] = col);
                }
                return _results;
              });
              req.on('doneInProc', function(rowCount, more, rows) {
                if (Object.keys(columns).length === 0) {
                  return;
                }
                Object.defineProperty(recordset, 'columns', {
                  enumerable: false,
                  value: createColumns(columns)
                });
                Object.defineProperty(recordset, 'toTable', {
                  enumerable: false,
                  value: function() {
                    return Table.fromRecordset(this);
                  }
                });
                _this.emit('recordset', recordset);
                recordsets.push(recordset);
                recordset = [];
                return columns = {};
              });
              req.on('returnValue', function(parameterName, value, metadata) {
                if (_this.verbose) {
                  if (value === tds.TYPES.Null) {
                    console.log("   output: @" + parameterName + ", null");
                  } else {
                    console.log("   output: @" + parameterName + ", " + (_this.parameters[parameterName].type.declaration.toLowerCase()) + ", " + value);
                  }
                }
                return _this.parameters[parameterName].value = value === tds.TYPES.Null ? null : value;
              });
              req.on('row', function(columns) {
                var col, exi, row, _i, _len;
                if (!recordset) {
                  recordset = [];
                }
                row = {};
                for (_i = 0, _len = columns.length; _i < _len; _i++) {
                  col = columns[_i];
                  col.value = valueCorrection(col.value, col.metadata);
                  exi = row[col.metadata.colName];
                  if (exi != null) {
                    if (exi instanceof Array) {
                      exi.push(col.value);
                    } else {
                      row[col.metadata.colName] = [exi, col.value];
                    }
                  } else {
                    row[col.metadata.colName] = col.value;
                  }
                }
                if (_this.verbose) {
                  console.log(util.inspect(row));
                  console.log("---------- --------------------");
                }
                _this.emit('row', row);
                return recordset.push(row);
              });
              _ref = _this.parameters;
              for (name in _ref) {
                param = _ref[name];
                if (!(param.io === 1)) {
                  continue;
                }
                if (_this.verbose) {
                  if (param.value === tds.TYPES.Null) {
                    console.log("    input: @" + param.name + ", null");
                  } else {
                    console.log("    input: @" + param.name + ", " + (param.type.declaration.toLowerCase()) + ", " + param.value);
                  }
                }
                req.addParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), {
                  length: param.length,
                  scale: param.scale,
                  precision: param.precision
                });
              }
              _ref1 = _this.parameters;
              for (name in _ref1) {
                param = _ref1[name];
                if (param.io === 2) {
                  req.addOutputParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), {
                    length: param.length,
                    scale: param.scale,
                    precision: param.precision
                  });
                }
              }
              if (_this.verbose) {
                console.log("---------- response -----------");
              }
              return connection.execSql(req);
            } else {
              if (connection) {
                _this._release(connection);
              }
              return typeof callback === "function" ? callback(err) : void 0;
            }
          };
        })(this));
      };


      /*
      		Execute stored procedure with specified parameters.
       */

      TediousRequest.prototype.execute = function(procedure, callback) {
        var columns, recordset, recordsets, returnValue, started;
        columns = {};
        recordset = [];
        recordsets = [];
        returnValue = 0;
        started = Date.now();
        return this._acquire((function(_this) {
          return function(err, connection) {
            var name, param, req, _ref;
            if (!err) {
              if (_this.verbose) {
                console.log("---------- sql execute --------\n     proc: " + procedure);
              }
              if (_this.canceled) {
                if (_this.verbose) {
                  console.log("---------- canceling ----------");
                }
                _this._release(connection);
                return typeof callback === "function" ? callback(new RequestError("Canceled.", 'ECANCEL')) : void 0;
              }
              _this._cancel = function() {
                if (_this.verbose) {
                  console.log("---------- canceling ----------");
                }
                return connection.cancel();
              };
              req = new tds.Request(procedure, function(err) {
                var elapsed;
                if (err) {
                  err = RequestError(err);
                }
                if (_this.verbose) {
                  if (err) {
                    console.log("    error: " + err);
                  }
                  elapsed = Date.now() - started;
                  console.log("   return: " + returnValue);
                  console.log(" duration: " + elapsed + "ms");
                  console.log("---------- completed ----------");
                }
                _this._cancel = null;
                _this._release(connection);
                recordsets.returnValue = returnValue;
                return typeof callback === "function" ? callback(err, recordsets, returnValue) : void 0;
              });
              req.on('columnMetadata', function(metadata) {
                var col, _i, _len, _results;
                _results = [];
                for (_i = 0, _len = metadata.length; _i < _len; _i++) {
                  col = metadata[_i];
                  _results.push(columns[col.colName] = col);
                }
                return _results;
              });
              req.on('row', function(columns) {
                var col, exi, row, _i, _len;
                if (!recordset) {
                  recordset = [];
                }
                row = {};
                for (_i = 0, _len = columns.length; _i < _len; _i++) {
                  col = columns[_i];
                  col.value = valueCorrection(col.value, col.metadata);
                  exi = row[col.metadata.colName];
                  if (exi != null) {
                    if (exi instanceof Array) {
                      exi.push(col.value);
                    } else {
                      row[col.metadata.colName] = [exi, col.value];
                    }
                  } else {
                    row[col.metadata.colName] = col.value;
                  }
                }
                if (_this.verbose) {
                  console.log(util.inspect(row));
                  console.log("---------- --------------------");
                }
                _this.emit('row', row);
                return recordset.push(row);
              });
              req.on('doneInProc', function(rowCount, more, rows) {
                if (Object.keys(columns).length === 0) {
                  return;
                }
                Object.defineProperty(recordset, 'columns', {
                  enumerable: false,
                  value: createColumns(columns)
                });
                Object.defineProperty(recordset, 'toTable', {
                  enumerable: false,
                  value: function() {
                    return Table.fromRecordset(this);
                  }
                });
                _this.emit('recordset', recordset);
                recordsets.push(recordset);
                recordset = [];
                return columns = {};
              });
              req.on('doneProc', function(rowCount, more, returnStatus, rows) {
                return returnValue = returnStatus;
              });
              req.on('returnValue', function(parameterName, value, metadata) {
                if (metadata.type === tds.TYPES.Binary || metadata.type === tds.TYPES.VarBinary || metadata.type === tds.TYPES.Image) {
                  value = new Buffer(value);
                }
                if (_this.verbose) {
                  if (value === tds.TYPES.Null) {
                    console.log("   output: @" + parameterName + ", null");
                  } else {
                    console.log("   output: @" + parameterName + ", " + (_this.parameters[parameterName].type.declaration.toLowerCase()) + ", " + value);
                  }
                }
                return _this.parameters[parameterName].value = value === tds.TYPES.Null ? null : value;
              });
              _ref = _this.parameters;
              for (name in _ref) {
                param = _ref[name];
                if (_this.verbose) {
                  if (param.value === tds.TYPES.Null) {
                    console.log("   " + (param.io === 1 ? " input" : "output") + ": @" + param.name + ", null");
                  } else {
                    console.log("   " + (param.io === 1 ? " input" : "output") + ": @" + param.name + ", " + (param.type.declaration.toLowerCase()) + ", " + param.value);
                  }
                }
                if (param.io === 1) {
                  req.addParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), {
                    length: param.length,
                    scale: param.scale,
                    precision: param.precision
                  });
                } else {
                  req.addOutputParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), {
                    length: param.length,
                    scale: param.scale,
                    precision: param.precision
                  });
                }
              }
              if (_this.verbose) {
                console.log("---------- response -----------");
              }
              return connection.callProcedure(req);
            } else {
              if (connection) {
                _this._release(connection);
              }
              return typeof callback === "function" ? callback(err) : void 0;
            }
          };
        })(this));
      };


      /*
      		Cancel currently executed request.
       */

      TediousRequest.prototype.cancel = function() {
        if (this._cancel) {
          return this._cancel();
        }
        return true;
      };

      return TediousRequest;

    })(Request);
    return {
      Connection: TediousConnection,
      Transaction: TediousTransaction,
      Request: TediousRequest,
      fix: function() {}
    };
  };

}).call(this);
